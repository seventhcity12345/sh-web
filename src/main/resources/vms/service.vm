#set($length=$EntityName.length())
##首字母小写
#set($entityName=$EntityName.substring(0,1).toLowerCase()+$EntityName.substring(1,$length))
#set($entityName=$EntityName.substring(0,1).toLowerCase()+$EntityName.substring(1,$length))
package com.${companyName}.${projectName}.${entityname}.service;

import javax.annotation.Resource;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import com.${companyName}.${projectName}.${entityname}.entity.${EntityName};
import org.apache.log4j.Logger;
import com.${companyName}.${projectName}.${entityname}.dao.${EntityName}Dao;
import java.util.List;

/**
 * @category ${entityName}控制类
 * @author mingyisoft代码生成工具
 *
 */
@Service
@Transactional(propagation = Propagation.NOT_SUPPORTED)
//@Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.SERIALIZABLE)
public class ${EntityName}Service {
	private static Logger logger = Logger.getLogger(${EntityName}Service.class);
	@Resource
	${EntityName}Dao ${entityName}Dao;
	
	/**
	 * Title: 新增数据<br>
	 * Description: insert<br>
	 * CreateDate: 2016年4月11日 上午8:57:05<br>
	 * @category 新增数据 
	 * @author yangmh
	 * @param paramObj
	 * @return
	 * @throws Exception
	 */
	public int insert(${EntityName} paramObj) throws Exception {
		return ${entityName}Dao.insert(paramObj);
	}

	/**
	 * Title: 批量新增数据<br>
	 * Description: 仅用于当前Dao所属表的数据操作<br>
	 * CreateDate: 2016年4月4日 上午12:04:36<br>
	 * 
	 * @category 批量新增数据
	 * @author yangmh
	 * @param paramObj
	 *            参数对象List
	 * @return 执行成功数
	 * @throws Exception
	 */
	public int batchInsert(List<${EntityName}> paramObjList) throws Exception {
		return ${entityName}Dao.batchInsert(paramObjList);
	}

	/**
	 * Title: 逻辑删除数据<br>
	 * Description: 仅用于当前Dao所属表的数据操作<br>
	 * CreateDate: 2016年4月4日 上午12:12:00<br>
	 * 
	 * @category 逻辑删除数据
	 * @author yangmh
	 * @param keyId
	 *            如果是多个删除就使用逗号分隔,否则就是一个keyId
	 * @return 执行成功数
	 * @throws Exception
	 */
	public int delete(String keyIds) throws Exception {
		return ${entityName}Dao.delete(keyIds);
	}

	/**
	 * Title: 逻辑删除数据<br>
	 * Description: 仅用于当前Dao所属表的数据操作<br>
	 * CreateDate: 2016年4月4日 上午12:12:23<br>
	 * 
	 * @category 逻辑删除数据
	 * @author yangmh
	 * @param keyIds
	 * @return 执行成功数
	 * @throws Exception
	 */
	public int delete(List<String> keyIds) throws Exception {
		return ${entityName}Dao.delete(keyIds);
	}

	/**
	 * Title: 物理删除数据<br>
	 * Description: 仅用于当前Dao所属表的数据操作<br>
	 * CreateDate: 2016年4月4日 上午12:12:50<br>
	 * 
	 * @category 物理删除数据
	 * @author yangmh
	 * @param keyIds
	 * @return 执行成功数
	 * @throws Exception
	 */
	public int deleteForReal(List<String> keyIds) throws Exception {
		return ${entityName}Dao.deleteForReal(keyIds);
	}

	/**
	 * Title: 物理删除数据<br>
	 * Description: 仅用于当前Dao所属表的数据操作<br>
	 * CreateDate: 2016年4月4日 上午12:12:50<br>
	 * 
	 * @category 物理删除数据
	 * @author yangmh
	 * @param keyId
	 *            如果是多个删除就使用逗号分隔,否则就是一个keyId
	 * @return 执行成功数
	 * @throws Exception
	 */
	public int deleteForReal(String keyIds) throws Exception {
		return ${entityName}Dao.deleteForReal(keyIds);
	}

	/**
	 * Title: 修改数据<br>
	 * Description: 仅用于当前Dao所属表的数据操作<br>
	 * CreateDate: 2016年4月4日 上午12:40:18<br>
	 * 
	 * @category 修改数据
	 * @author yangmh
	 * @param paramObj
	 *            参数对象
	 * @return 执行成功数
	 * @throws Exception
	 */
	public int update(${EntityName} paramObj) throws Exception {
		return ${entityName}Dao.update(paramObj);
	}
	
	/**
	 * Title: 批量修改数据<br>
	 * Description: 仅用于当前Dao所属表的数据操作<br>
	 * CreateDate: 2016年4月4日 上午12:46:26<br>
	 * 
	 * @category 批量修改数据
	 * @author yangmh
	 * @param paramObjList
	 *            参数对象List
	 * @return 执行成功数
	 * @throws Exception
	 */
	public int batchUpdate(List<${EntityName}> paramObjList) throws Exception {
		return ${entityName}Dao.batchUpdate(paramObjList);
	}
	
	/**
	 * Title: 查询数量数据<br>
	 * Description: 仅用于当前Dao所属表的数据操作<br>
	 * CreateDate: 2016年4月4日 上午1:09:45<br>
	 * 
	 * @category 查询数量数据
	 * @author yangmh
	 * @param paramObj
	 *            参数对象
	 * @return
	 * @throws Exception
	 */
	public int findCount(${EntityName} paramObj) throws Exception {
		return ${entityName}Dao.findCount(paramObj);
	}
}